const UneteEth = require('unete-eth');
const UneteEthClient = require('unete-eth/client');
const Storage = require('../storage');
const Credentials = Storage('unete-eth');
const { encrypt, decrypt } =  require('../aes');
const readline = require('readline-sync');
const YAML = require('yamljs');

module.exports = {

    configure () {
        console.log("Hello! Welcome to Unete-Eth configuration!".bold.cyan);
        const pass = readline.question(`Please enter a secure password for your data: `.green.bold, { hideEchoBack: true });
        const confirm = readline.question(`Again?: `.green.bold, { hideEchoBack: true });

        if(pass !== confirm) {
            console.log("Your passwords doesn't match :(".bold.red);
            process.exit();
        }

        if(Credentials.get('address') && !readline.keyInYNStrict("Hey! There is another data stored here, do you want to overwrite it?")) {
            console.log("\"Prudence is the quality of being prudent\" -  Camilo Torres".bold.cyan);
            process.exit();
        }
        
        console.log("All your secret data will be stored cyphered.".bold.cyan)

        const passphrase = readline.question('Please enter the passphrase/private key for your transactions: '.bold.cyan, { hideEchoBack: true });
        const provider = readline.question('Please enter your trusted provider: '.bold.cyan);
        const address = readline.question('Please enter your public address: '.bold.cyan);

        if(!readline.keyInYNStrict("Are you sure about the info you have entered?".magenta.cyan)) {
            console.log("\"Prudence is the quality of being prudent\" -  Camilo Torres".bold.cyan);
            process.exit();
        }

        Credentials.set('passphrase', encrypt(passphrase, pass).toString('base64'));
        Credentials.set('provider', provider);
        Credentials.set('address', address);
        
    },

    data (pass, hidden) {
        pass = pass || readline.question(`Please your security password: `.yellow.bold, { hideEchoBack: true });

        if(hidden !== true) console.log(data(pass));

        return data(pass);
    },

    async deploy (input, conf, program) {
        const pass = readline.question(`Please your security password: `.yellow.bold, { hideEchoBack: true });
        try {
            var config = data(pass);
        } catch (exc) {
            var config = {};
        }

        if(!program) {
            program = conf;
            conf = null;
        } else {
            config = {
                ...config,
                ...YAML.load(conf)
            };
        }

        config.provider = config.provider || program.node;

        config = { ...config, input };
        
        
        const { contract, hash, address } = await UneteEth.deploy(config);

        console.log("ABI:".bold.cyan, JSON.stringify(contract.abi))
        console.log("Hash: ".bold.cyan, hash.bold.yellow);
        console.log("Contract deployed successfully!".bold.cyan);

        const uploaded = readline.keyInYNStrict('Do you want to upload your ABI to the Unete Network? (This is a new transaction)'.bold.cyan);
        if(!uploaded) return;

        const networks = Object.keys(UneteEthClient.networks);
        const network_index = readline.keyInSelect(networks, 'Which network do you want to use for deploying?'.bold.cyan);

        const addr = `${networks[network_index]}@${UneteEthClient.networks[networks[network_index]].contract}`;
        const client = UneteEthClient(addr, config);
        const confirmation = readline.keyInYNStrict(
            'Contract will be deployed at: '.bold.cyan + addr.bold.yellow +
            " for address ".bold.cyan + 
            address.bold.yellow,
            "Are you sure?".bold.cyan);

        if(!confirmation) {
            console.log("\"Prudence is the quality of being prudent\" -  Camilo Torres".bold.cyan);
            process.exit();
        }

        await client.store(address, Buffer.from(JSON.stringify(contract.abi)).toString('base64'));
        console.log("Contract deployed successfully!".bold.cyan);
    }

}

function data(pass) {
    return {
        passphrase: decrypt(Buffer.from(Credentials.get('passphrase') || "", 'base64'), pass).toString(),
        provider: Credentials.get('provider'),
        address: Credentials.get('address')
    }
}