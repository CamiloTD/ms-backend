const { blue, bold, yellow, red, green, magenta, italic, cyan } = require('chalk');
var debugging = true;

const { stdout } = process;

//* Utils
    export const info      = (str: string) => blue  (str);
    export const warning   = (str: string) => bold  (yellow (str));
    export const danger    = (str: string) => bold  (red    (str));
    export const highlight = (str: string) => bold  (green  (str));
    export const field     = (str: string) => italic(magenta(str)) 
    export const cold      = (str: string) => bold(cyan(str));

//* Utils
    export const timestamp = () => cyan(`[${new Date().toUTCString()}]`);

//* Log
    export const log       = (...data: Array<any>) => {
        console.log(timestamp(), ...data);
        return Date.now();
    }
    export const warn      = (data: string) => log(warning(data));
    export const line      = () => console.log('\n');
    export const debugPromise   = async (promise: Promise<any>, title: string) => {
        const line = new DynamicLine(`ðŸ¤ž  ${title}...`);
        const time = Date.now();
        try {
            await promise;

            line.rewrite(`âœ¨  ${title}: ${highlight(`Done! (${Date.now() - time}ms)`)}`);
            line.end();
        } catch (exc) {
            line.rewrite(`ðŸ’¥  ${title}: ${danger(`${exc.message || exc} (${Date.now() - time}ms)`)}`);
            line.end();
        };
    }

    export class DynamicLine {
        
        constructor (private str: string = "") {
            this.rewrite(str);
        }

        write (str: string) {
            stdout.write(str);
        }

        rewrite (str: string) {
            this.clean();
            stdout.write(`${timestamp()} ${str}`);
        }

        clean () {
            stdout.write('\r'.padEnd(this.str.length, " ") + '\r');
        }

        end () {
            stdout.write('\n');
        }
        
    }