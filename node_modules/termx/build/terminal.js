"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const { blue, bold, yellow, red, green, magenta, italic, cyan } = require('chalk');
var debugging = true;
const { stdout } = process;
//* Utils
exports.info = (str) => blue(str);
exports.warning = (str) => bold(yellow(str));
exports.danger = (str) => bold(red(str));
exports.highlight = (str) => bold(green(str));
exports.field = (str) => italic(magenta(str));
exports.cold = (str) => bold(cyan(str));
//* Utils
exports.timestamp = () => cyan(`[${new Date().toUTCString()}]`);
//* Log
exports.log = (...data) => {
    console.log(exports.timestamp(), ...data);
    return Date.now();
};
exports.warn = (data) => exports.log(exports.warning(data));
exports.line = () => console.log('\n');
exports.debugPromise = (promise, title) => __awaiter(void 0, void 0, void 0, function* () {
    const line = new DynamicLine(`ðŸ¤ž  ${title}...`);
    const time = Date.now();
    try {
        yield promise;
        line.rewrite(`âœ¨  ${title}: ${exports.highlight(`Done! (${Date.now() - time}ms)`)}`);
        line.end();
    }
    catch (exc) {
        line.rewrite(`ðŸ’¥  ${title}: ${exports.danger(`${exc.message || exc} (${Date.now() - time}ms)`)}`);
        line.end();
    }
    ;
});
class DynamicLine {
    constructor(str = "") {
        this.str = str;
        this.rewrite(str);
    }
    write(str) {
        stdout.write(str);
    }
    rewrite(str) {
        this.clean();
        stdout.write(`${exports.timestamp()} ${str}`);
    }
    clean() {
        stdout.write('\r'.padEnd(this.str.length, " ") + '\r');
    }
    end() {
        stdout.write('\n');
    }
}
exports.DynamicLine = DynamicLine;
