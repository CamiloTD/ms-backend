"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var directory_tree_1 = __importDefault(require("directory-tree"));
var path_1 = require("path");
var unete_io_1 = require("unete-io");
var child_process_1 = require("child_process");
var rxjs_1 = require("rxjs");
var termx_1 = require("termx");
function Serve(FOLDER, PORT, config) {
    if (config === void 0) { config = { include: [], exclude: [] }; }
    if (!config.verbose)
        config.verbose = { emit: true, error: true, logs: true };
    var verbose = config.verbose;
    var print = termx_1.log;
    var Functions = {};
    //? -------- File Watchers ---------
    var paths = plainifyTree(directory_tree_1["default"](FOLDER).children).filter(function (p) {
        for (var _i = 0, _a = config.include; _i < _a.length; _i++) {
            var r = _a[_i];
            var regex = new RegExp(r, "i");
            if (regex.test(p))
                return true;
        }
        return false;
    }).filter(function (p) {
        for (var _i = 0, _a = config.exclude; _i < _a.length; _i++) {
            var r = _a[_i];
            var regex = new RegExp(r, "i");
            if (regex.test(p))
                return false;
        }
        return true;
    });
    function normalizeName(child) {
        child.name = child.name.replace(/-([a-z])/gi, function ($0, $1) { return $1.toUpperCase(); });
        if (child.type === "directory")
            return child.name[0].toUpperCase() + child.name.substring(1);
        else {
            return child.name
                .replace(/^(.+)\..+$/, function ($0, $1) { return $1; })
                .replace(/[^a-z0-9\$]/gi, "");
        }
    }
    function plainifyTree(children, prefix) {
        if (prefix === void 0) { prefix = ""; }
        var paths = [];
        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
            var child = children_1[_i];
            var pref = prefix ? prefix + "/" + child.name : child.name;
            if (child.type === "file")
                paths.push(pref);
            else if (child.type === "directory" && child.children.length)
                paths.push.apply(paths, plainifyTree(child.children, pref));
        }
        return paths;
    }
    //? --------- Definitions ----------
    function readData(str) {
        if (!isNaN(+str))
            return +str;
        try {
            return JSON.parse(str);
        }
        catch (exc) { }
        return str;
    }
    function addFile(path) {
        var paths = path.split('/');
        var pointer = Functions;
        for (var i = 0; i < paths.length - 1; i++) {
            var name_1 = normalizeName({ name: paths[i], type: "directory" });
            if (!pointer[name_1])
                pointer[name_1] = {};
            pointer = pointer[name_1];
        }
        pointer[normalizeName({ name: paths[paths.length - 1], type: "file" })] = function exec() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            //* Data value emission
            return new rxjs_1.Observable(function (subscriber) {
                var Events = {
                    emit: function (value) {
                        subscriber.next(value);
                    }
                };
                function parse(str) {
                    //* Matches @Command: Data
                    var match = /^\s*@(.+?):\s*(.+)\s*$/.exec(str);
                    if (!match)
                        return verbose.logs && print(termx_1.cold(path + ":"), str);
                    var Command = match[1], Data = match[2];
                    var value = readData(Data);
                    if (!Events[Command.toLowerCase()])
                        return verbose.error && print(termx_1.cold(path + ":"), termx_1.danger('@' + Command), value);
                    verbose.emit && print(termx_1.cold(path + ":"), termx_1.highlight('@' + Command), value);
                    Events[Command.toLowerCase()](value);
                }
                var process = child_process_1.spawn(path_1.resolve(FOLDER, path), args, {
                    windowsHide: true
                });
                process.stdout.on('data', function (data) {
                    var str = data.toString().trim().split("\n");
                    str.forEach(parse);
                });
                process.on('close', function () { return subscriber.complete(); });
            });
        };
    }
    paths.forEach(addFile);
    //? ----------- Server -------------
    var server = new unete_io_1.Server(Functions);
    server.listen(PORT);
    print("ðŸš€  Server listening at port", termx_1.highlight(PORT.toString()));
}
exports["default"] = Serve;
